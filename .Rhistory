1+1
setwd("~/git/machineLearning/GiveMeCredit")
library(magrittr)
library(dplyr)
library(ROCR)
# clear variables
closeAllConnections()
rm(list=ls())
# get new variables
creditDF <- read.csv("training.csv", sep = ",")
totalCreditDF <- creditDF
#creditDF <- creditDF[1:10000,]
head(creditDF)
plot(creditDF$RevolvingUtilizationOfUnsecuredLines)
plot(creditDF$age)
plot(creditDF$NumberOfTime30.59DaysPastDueNotWorse)
plot(creditDF$DebtRatio)
plot(creditDF$MonthlyIncome)
plot(creditDF$NumberOfOpenCreditLinesAndLoans)
plot(creditDF$NumberOfTimes90DaysLate)
plot(creditDF$NumberRealEstateLoansOrLines)
plot(creditDF$NumberOfTime60.89DaysPastDueNotWorse)
plot(creditDF$NumberOfDependents)
summary(creditDF$RevolvingUtilizationOfUnsecuredLines)
summary(creditDF$age)
summary(creditDF$NumberOfTime30.59DaysPastDueNotWorse)
summary(creditDF$DebtRatio)
summary(creditDF$MonthlyIncome)
summary(creditDF$NumberOfOpenCreditLinesAndLoans)
summary(creditDF$NumberOfTimes90DaysLate)
summary(creditDF$NumberRealEstateLoansOrLines)
summary(creditDF$NumberOfTime60.89DaysPastDueNotWorse)
summary(creditDF$NumberOfDependents)
# Take a sample to work on
creditDF <- totalCreditDF
creditDF <- creditDF[1:10000,]
creditDF <- creditDF %>% mutate(
#1
age = log(age),
#2
revolving.utilization.of.unsecured.lines = RevolvingUtilizationOfUnsecuredLines + 1,
revolving.utilization.of.unsecured.lines = log(revolving.utilization.of.unsecured.lines),
#3
number.of.time.30.59.days.past.due.not.worse = NumberOfTime30.59DaysPastDueNotWorse + 1,
number.of.time.30.59.days.past.due.not.worse = log(number.of.time.30.59.days.past.due.not.worse),
#4
number.of.time.60.89.days.past.due.not.worse = NumberOfTime60.89DaysPastDueNotWorse + 1,
number.of.time.60.89.days.past.due.not.worse = log(number.of.time.60.89.days.past.due.not.worse),
#5
number.of.times.90.days.late = NumberOfTimes90DaysLate + 1,
number.of.times.90.days.late = log(number.of.times.90.days.late),
#6
debt.ratio = DebtRatio + 1,
debt.ratio = log(debt.ratio),
#7
monthly.income = MonthlyIncome,
monthly.income = ifelse(is.na(monthly.income), 0, monthly.income),
monthly.income = monthly.income + 1,
monthly.income = log(monthly.income),
#8
number.of.open.credit.lines.and.loans = NumberOfOpenCreditLinesAndLoans + 1,
number.of.open.credit.lines.and.loans = log(number.of.open.credit.lines.and.loans),
#9
number.of.dependents = NumberOfDependents,
number.of.dependents = ifelse(is.na(number.of.dependents), 0, number.of.dependents),
number.of.dependents = log(number.of.dependents + 1),
#10
number.real.estate.loans.or.lines = NumberRealEstateLoansOrLines + 1,
number.real.estate.loans.or.lines = log(number.real.estate.loans.or.lines),
#compose attributes
low.age           = ifelse(age < 21, 1, 0),
not.eligible      = ifelse(age > 60, 1, 0),
no.dependents                     = ifelse(number.of.dependents == 0, 1, 0),
has.dependents                    = ifelse(number.of.dependents > 0, 1, 0),
years.of.age.per.dependent        = age / (number.of.dependents + 1),
no.income                         = ifelse(monthly.income == 0, 1, 0),
income.per.person                 = monthly.income / (number.of.dependents + 1),
income.per.age                    = monthly.income / (age + 1),
debt                                = log(debt.ratio * monthly.income + 1),
debt.over.income                    = debt / (monthly.income + 1),
no.debt                             = ifelse(debt.ratio == 0, 1, 0),
debt.with.no.income                 = ifelse(debt > 0 && monthly.income == 0, 1, 0),
debt.higher.33                      = ifelse(debt.ratio > .33, 1, 0),
debt.higher.5                       = ifelse(debt.ratio > .5, 1, 0),
undefigned.debt                     = ifelse(is.na(debt.ratio), 1, 0),
debt.per.person                     = debt / (number.of.dependents + 1),
debt.per.open.credit.lines          = debt / (number.of.open.credit.lines.and.loans + 1),
debt.per.number.of.realestate.loans = debt / (number.real.estate.loans.or.lines + 1),
remaining.income         = monthly.income - debt,
extreme.credit.use       = ifelse(revolving.utilization.of.unsecured.lines > .99, 1, 0),
no.credit.use            = ifelse(revolving.utilization.of.unsecured.lines == 0, 1, 0),
credit.card.loans               = number.of.open.credit.lines.and.loans - number.real.estate.loans.or.lines,
credit.card.loans.per.person    = credit.card.loans / (number.of.dependents + 1),
real.estate.loans.per.person           = number.real.estate.loans.or.lines / (number.of.dependents + 1),
revolving.loans.over.real.estate.loans = credit.card.loans / (number.real.estate.loans.or.lines + 1),
late.minor.over.income           = number.of.time.30.59.days.past.due.not.worse / (monthly.income + 1),
late.minor.over.remaining.income = number.of.time.30.59.days.past.due.not.worse / (remaining.income + 1),
late.minor.over.debt             = number.of.time.30.59.days.past.due.not.worse / (debt + 1),
late.mid.over.income           = number.of.time.60.89.days.past.due.not.worse / (monthly.income + 1),
late.mid.over.remaining.income = number.of.time.60.89.days.past.due.not.worse / (remaining.income + 1),
late.mid.over.debt             = number.of.time.60.89.days.past.due.not.worse / (debt + 1),
late.major.over.income           = number.of.times.90.days.late / (monthly.income + 1),
late.major.over.remaining.income = number.of.times.90.days.late / (remaining.income + 1),
late.major.over.debt             = number.of.times.90.days.late / (debt + 1)
) %>% select(-Id,
-RevolvingUtilizationOfUnsecuredLines,
-NumberOfTime30.59DaysPastDueNotWorse,
-DebtRatio,
-MonthlyIncome,
-NumberOfOpenCreditLinesAndLoans,
-NumberOfTimes90DaysLate,
-NumberRealEstateLoansOrLines,
-NumberOfTime60.89DaysPastDueNotWorse,
-NumberOfDependents)
head(creditDF)
plot(creditDF$age)
plot(creditDF$monthly.income)
plot(creditDF$debt.ratio)
plot(creditDF$number.of.open.credit.lines.and.loans)
plot(creditDF$number.real.estate.loans.or.lines)
plot(creditDF$revolving.utilization.of.unsecured.lines)
plot(creditDF$number.of.time.30.59.days.past.due.not.worse)
plot(creditDF$number.of.time.60.89.days.past.due.not.worse)
plot(creditDF$number.of.times.90.days.late)
plot(creditDF$number.of.dependents)
summary(creditDF$age)
summary(creditDF$monthly.income)
summary(creditDF$debt.ratio)
summary(creditDF$number.of.open.credit.lines.and.loans)
summary(creditDF$number.real.estate.loans.or.lines)
summary(creditDF$revolving.utilization.of.unsecured.lines)
summary(creditDF$number.of.time.30.59.days.past.due.not.worse)
summary(creditDF$number.of.time.60.89.days.past.due.not.worse)
summary(creditDF$number.of.times.90.days.late)
summary(creditDF$number.of.dependents)
# normalization
creditDF <- creditDF %>% mutate(
#1
age                                          = (age - min(age)) / (max(age) - min(age)) ,
revolving.utilization.of.unsecured.lines     = (revolving.utilization.of.unsecured.lines - min(revolving.utilization.of.unsecured.lines)) / (max(revolving.utilization.of.unsecured.lines) - min(revolving.utilization.of.unsecured.lines)) ,
number.of.time.30.59.days.past.due.not.worse = (number.of.time.30.59.days.past.due.not.worse - min(number.of.time.30.59.days.past.due.not.worse)) / (max(number.of.time.30.59.days.past.due.not.worse) - min(number.of.time.30.59.days.past.due.not.worse)),
number.of.time.60.89.days.past.due.not.worse = (number.of.time.60.89.days.past.due.not.worse - min(number.of.time.60.89.days.past.due.not.worse)) / (max(number.of.time.60.89.days.past.due.not.worse) - min(number.of.time.60.89.days.past.due.not.worse)),
number.of.times.90.days.late                 = (number.of.times.90.days.late - min(number.of.times.90.days.late)) / (max(number.of.times.90.days.late) - min(number.of.times.90.days.late)),
debt.ratio                                   = (debt.ratio - min(debt.ratio)) / (max(debt.ratio) - min(debt.ratio)),
monthly.income                               = (monthly.income - min(monthly.income)) / (max(monthly.income) - min(monthly.income)),
number.of.open.credit.lines.and.loans        = (number.of.open.credit.lines.and.loans - min(number.of.open.credit.lines.and.loans)) / (max(number.of.open.credit.lines.and.loans) - min(number.of.open.credit.lines.and.loans)),
number.of.dependents                         = (number.of.dependents - min(number.of.dependents)) / (max(number.of.dependents) - min(number.of.dependents)),
number.real.estate.loans.or.lines            = (number.real.estate.loans.or.lines - min(number.real.estate.loans.or.lines)) / (max(number.real.estate.loans.or.lines) - min(number.real.estate.loans.or.lines)),
#compose attributes
years.of.age.per.dependent             = (years.of.age.per.dependent - min(years.of.age.per.dependent)) / (max(years.of.age.per.dependent) - min(years.of.age.per.dependent)),
income.per.person                      = (income.per.person - min(income.per.person)) / (max(income.per.person) - min(income.per.person)),
income.per.age                         = (income.per.age - min(income.per.age)) / (max(income.per.age) - min(income.per.age)),
debt                                   = (debt - min(debt)) / (max(debt) - min(debt)),
debt.over.income                       = (debt.over.income - min(debt.over.income)) / (max(debt.over.income) - min(debt.over.income)),
debt.per.person                        = (debt.per.person - min(debt.per.person)) / (max(debt.per.person) - min(debt.per.person)),
debt.per.open.credit.lines             = (debt.per.open.credit.lines - min(debt.per.open.credit.lines)) / (max(debt.per.open.credit.lines) - min(debt.per.open.credit.lines)),
debt.per.number.of.realestate.loans    = (debt.per.number.of.realestate.loans - min(debt.per.number.of.realestate.loans)) / (max(debt.per.number.of.realestate.loans) - min(debt.per.number.of.realestate.loans)),
remaining.income                       = (remaining.income - min(remaining.income)) / (max(remaining.income) - min(remaining.income)),
credit.card.loans                      = (credit.card.loans - min(credit.card.loans)) / (max(credit.card.loans) - min(credit.card.loans)),
credit.card.loans.per.person           = (credit.card.loans.per.person - min(credit.card.loans.per.person)) / (max(credit.card.loans.per.person) - min(credit.card.loans.per.person)),
real.estate.loans.per.person           = (real.estate.loans.per.person - min(real.estate.loans.per.person)) / (max(real.estate.loans.per.person) - min(real.estate.loans.per.person)),
revolving.loans.over.real.estate.loans = (revolving.loans.over.real.estate.loans - min(revolving.loans.over.real.estate.loans)) / (max(revolving.loans.over.real.estate.loans) - min(revolving.loans.over.real.estate.loans)),
late.minor.over.income                 = (late.minor.over.income - min(late.minor.over.income)) / (max(late.minor.over.income) - min(late.minor.over.income)),
late.minor.over.remaining.income       = (late.minor.over.remaining.income - min(late.minor.over.remaining.income)) / (max(late.minor.over.remaining.income) - min(late.minor.over.remaining.income)),
late.minor.over.debt                   = (late.minor.over.debt - min(late.minor.over.debt)) / (max(late.minor.over.debt) - min(late.minor.over.debt)),
late.mid.over.income                   = (late.mid.over.income - min(late.mid.over.income)) / (max(late.mid.over.income) - min(late.mid.over.income)),
late.mid.over.remaining.income         = (late.mid.over.remaining.income - min(late.mid.over.remaining.income)) / (max(late.mid.over.remaining.income) - min(late.mid.over.remaining.income)),
late.mid.over.debt                     = (late.mid.over.debt - min(late.mid.over.debt)) / (max(late.mid.over.debt) - min(late.mid.over.debt)),
late.major.over.income                 = (late.major.over.income - min(late.major.over.income)) / (max(late.major.over.income) - min(late.major.over.income)),
late.major.over.remaining.income       = (late.major.over.remaining.income - min(late.major.over.remaining.income)) / (max(late.major.over.remaining.income) - min(late.major.over.remaining.income)),
late.major.over.debt                   = (late.major.over.debt - min(late.major.over.debt)) / (max(late.major.over.debt) - min(late.major.over.debt))
)
head(creditDF)
plot(creditDF$age)
plot(creditDF$monthly.income)
plot(creditDF$debt.ratio)
plot(creditDF$number.of.open.credit.lines.and.loans)
plot(creditDF$number.real.estate.loans.or.lines)
plot(creditDF$revolving.utilization.of.unsecured.lines)
plot(creditDF$number.of.time.30.59.days.past.due.not.worse)
plot(creditDF$number.of.time.60.89.days.past.due.not.worse)
plot(creditDF$number.of.times.90.days.late)
plot(creditDF$number.of.dependents)
summary(creditDF$age)
summary(creditDF$monthly.income)
summary(creditDF$debt.ratio)
summary(creditDF$number.of.open.credit.lines.and.loans)
summary(creditDF$number.real.estate.loans.or.lines)
summary(creditDF$revolving.utilization.of.unsecured.lines)
summary(creditDF$number.of.time.30.59.days.past.due.not.worse)
summary(creditDF$number.of.time.60.89.days.past.due.not.worse)
summary(creditDF$number.of.times.90.days.late)
summary(creditDF$number.of.dependents)
d <- dim(creditDF)
trainingDF <- creditDF[1:(d[1] * .8), ]
testDF     <- creditDF[(d[1] * .8 + 1):d[1],]
head(trainingDF)
head(testDF)
library(magrittr)
library(dplyr)
library(ROCR)
library(e1071)
library(randomForest)
model.lr <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=trainingDF)
pred.lr <- predict(model.lr, newdata=testDF, type="response")
pr.lr <- prediction(p, testDF$SeriousDlqin2yrs)
model.lr <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=trainingDF)
pred.lr <- predict(model.lr, newdata=testDF, type="response")
pr.lr <- prediction(pred.lr, testDF$SeriousDlqin2yrs)
prf <- performance(pr.lr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
model.lr <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=trainingDF)
pred.lr <- predict(model.lr, newdata=testDF, type="response")
pr.lr <- prediction(pred.lr, testDF$SeriousDlqin2yrs)
prf <- performance(pr.lr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr.lr, measure = "auc")
auc <- auc@y.values[[1]]
auc
model.svm <- svm(SeriousDlqin2yrs ~ ., data=iris)
model.svm <- svm(SeriousDlqin2yrs ~ ., data=trainingDF)
pred.svm <- predict(model.svm, testDF, type="response")
pr.svm <- prediction(pred.svm, testDF$SeriousDlqin2yrs)
prf.svm <- performance(pr.svm, measure = "tpr", x.measure = "fpr")
plot(prf.svm)
auc <- performance(pr.svm, measure = "auc")
auc <- auc@y.values[[1]]
auc
model.rf <- randomForest(SeriousDlqin2yrs ~ ., trainingDF, ntree=500, norm.votes=FALSE)
pred.rd <- predict(model.rf, testDF, type="response")
pr.rf <- prediction(pred.rf, testDF$SeriousDlqin2yrs)
1+1
pred.rf <- predict(model.rf, testDF, type="response")
pr.rf <- prediction(pred.rf, testDF$SeriousDlqin2yrs)
prf.rf <- performance(pr.rf, measure = "tpr", x.measure = "fpr")
plot(prf.rf)
auc <- performance(pr.rf, measure = "auc")
auc <- auc@y.values[[1]]
auc
model.rf <- randomForest(SeriousDlqin2yrs ~ ., trainingDF, ntree=500, norm.votes=FALSE)
pred.rf <- predict(model.rf, testDF, type="response")
pr.rf <- prediction(pred.rf, testDF$SeriousDlqin2yrs)
prf.rf <- performance(pr.rf, measure = "tpr", x.measure = "fpr")
plot(prf.rf)
auc <- performance(pr.rf, measure = "auc")
auc <- auc@y.values[[1]]
auc
plot(prf.rf)
auc <- performance(pr.rf, measure = "auc")
auc <- auc@y.values[[1]]
auc
pred.rf <- predict(model.rf, testDF, type="response")
pr.rf <- prediction(pred.rf, testDF$SeriousDlqin2yrs)
prf.rf <- performance(pr.rf, measure = "tpr", x.measure = "fpr")
plot(prf.rf)
auc <- performance(pr.rf, measure = "auc")
auc <- auc@y.values[[1]]
auc
training.results.DF <- data.frame(predict(model.lr, trainingDF),
predict(model.svm, trainingDF),
predict(model.rf, trainingDF),
trainingDF$SeriousDlqin2yrs)
View(training.results.DF)
View(pr.svm)
head(pred.lr)
View(training.results.DF)
predict(model.lr, trainingDF)
predict(model.lr, trainingDF, type="response")
head(predict(model.lr, trainingDF, type="response"))
training.results.DF <- data.frame(predict(model.lr, trainingDF, type="response"),
predict(model.svm, trainingDF, type="response"),
predict(model.rf, trainingDF, type="response"),
trainingDF$SeriousDlqin2yrs)
View(training.results.DF)
model.lr.fin <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=training.results.DF)
training.results.DF <- data.frame(lr = predict(model.lr, trainingDF, type="response"),
svm = predict(model.svm, trainingDF, type="response"),
rf = predict(model.rf, trainingDF, type="response"),
SeriousDlqin2yrs = trainingDF$SeriousDlqin2yrs)
View(training.results.DF)
model.lr.fin <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=training.results.DF)
test.fin.df <- data.frame(lr = pred.lr,
svm = pred.svm,
rf = pred.rf,
SeriousDlqin2yrs = testDF$SeriousDlqin2yrs)
pred.lr.fin <- predict(model.lr.fin, newdata=test.fin.df, type="response")
pr.lr.fin <- prediction(pred.lr.fin, test.fin.df$SeriousDlqin2yrs)
prf.fin <- performance(pr.lr.fin, measure = "tpr", x.measure = "fpr")
plot(prf.fin)
auc <- performance(pr.fin, measure = "auc")
auc <- performance(pr.lr.fin, measure = "auc")
auc <- auc@y.values[[1]]
auc
training.results.DF <- data.frame(lr = predict(model.lr, trainingDF, type="response"),
#svm = predict(model.svm, trainingDF, type="response"),
rf = predict(model.rf, trainingDF, type="response"),
SeriousDlqin2yrs = trainingDF$SeriousDlqin2yrs)
model.lr.fin <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=training.results.DF)
test.fin.df <- data.frame(lr = pred.lr,
#svm = pred.svm,
rf = pred.rf,
SeriousDlqin2yrs = testDF$SeriousDlqin2yrs)
pred.lr.fin <- predict(model.lr.fin, newdata=test.fin.df, type="response")
pr.lr.fin <- prediction(pred.lr.fin, test.fin.df$SeriousDlqin2yrs)
prf.fin <- performance(pr.lr.fin, measure = "tpr", x.measure = "fpr")
plot(prf.fin)
auc <- performance(pr.lr.fin, measure = "auc")
auc <- auc@y.values[[1]]
auc
model.lr.fin <- glm(SeriousDlqin2yrs ~.,  family=binomial(link='logit'),  data=training.results.DF)
test.fin.df <- data.frame(lr = pred.lr,
#svm = pred.svm,
rf = pred.rf,
SeriousDlqin2yrs = testDF$SeriousDlqin2yrs)
pred.lr.fin <- predict(model.lr.fin, newdata=test.fin.df, type="response")
pr.lr.fin <- prediction(pred.lr.fin, test.fin.df$SeriousDlqin2yrs)
prf.fin <- performance(pr.lr.fin, measure = "tpr", x.measure = "fpr")
plot(prf.fin)
auc <- performance(pr.lr.fin, measure = "auc")
auc <- auc@y.values[[1]]
auc
